/*

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/
module derelict.theora.codec;

private {
    import core.stdc.config;
    import derelict.util.loader;
    import derelict.util.system;

    static if( Derelict_OS_Windows )
        enum libNames = "theora.dll, libtheora-0.dll, libtheora.dll";
    else static if( Derelict_OS_Mac )
        enum libNames = "libtheora.dylib, libtheora.0.dylib";
    else static if( Derelict_OS_Posix )
        enum libNames = "libtheora.so, libtheora.so.0";
    else
        static assert( 0, "Need to implement libtheora libnames for this operating system." );
}

public {
    import derelict.ogg.ogg;
}

enum {
    TH_EFAULT = -1,
    TH_EINVAL = -10,
    TH_EBADHEADER = -20,
    TH_ENOTFORMAT = -21,
    TH_EVERSION = -22,
    TH_EIMPL = -23,
    TH_EBADPACKET = -24,
    TH_DUPFRAME = 1,
}

alias int th_colorspace;
enum {
    TH_CS_UNSPECIFIED,
    TH_CS_ITU_REC_470M,
    TH_CS_ITU_REC_470BG,
    TH_CS_NSPACES,
}

alias int th_pixel_fmt;
enum {
    TH_PF_420,
    TH_PF_RSVD,
    TH_PF_422,
    TH_PF_444,
    TH_PF_NFORMATS,
}

struct th_img_plane {
    int width;
    int height;
    int stride;
    ubyte* data;
}

alias th_ycbcr_buffer = th_img_plane[ 3 ];

struct th_info {
    ubyte version_major;
    ubyte version_minor;
    ubyte version_subminor;
    ogg_uint32_t frame_width;
    ogg_uint32_t frame_height;
    ogg_uint32_t pic_width;
    ogg_uint32_t pic_height;
    ogg_uint32_t pic_x;
    ogg_uint32_t pic_y;
    ogg_uint32_t fps_numerator;
    ogg_uint32_t fps_denominator;
    ogg_uint32_t aspect_numerator;
    ogg_uint32_t aspect_denominator;
    th_colorspace colorspace;
    th_pixel_fmt pixel_fmt;
    int target_bitrate;
    int quality;
    int keyframe_granule_shift;
}

struct th_comment {
    char** user_comments;
    int* comment_lengths;
    int comments;
    char* vendor;
}

alias th_quant_base = ubyte[ 64 ];

struct th_quant_ranges {
    int nranges;
    const( int )* sizes;
    const( th_quant_base )* base_matrices;
}

struct th_quant_info {
    ogg_uint16_t[ 64 ] dc_scale;
    ogg_uint16_t[ 64 ] ac_scale;
    ubyte[ 64 ] loop_filter_limits;
    th_quant_ranges[ 2 ][ 3 ] qi_ranges;
}

enum {
    TH_NHUFFMAN_TABLES = 80,
    TH_NDCT_TOKENS = 32,
}

struct th_huff_code {
    ogg_uint32_t pattern;
    int nbits;
}

extern( C ) @nogc nothrow {
    alias da_th_version_string = const( char )* function();
    alias da_th_version_number = ogg_uint32_t function();
    alias da_th_granule_frame = ogg_int64_t function( void*, ogg_int64_t );
    alias da_th_granule_time = double function( void*, ogg_int64_t );
    alias da_th_packet_isheader = int function( ogg_packet* );
    alias da_th_packet_iskeyframe = int function( ogg_packet* );
    alias da_th_info_init = void function( th_info* );
    alias da_th_info_clear = void function( th_info* );
    alias da_th_comment_init = void function( th_comment* );
    alias da_th_comment_add = void function( th_comment* );
    alias da_th_comment_add_tag = void function( th_comment*, char*, char* );
    alias da_th_comment_query = char* function( th_comment*, char*, int );
    alias da_th_comment_query_count = int function( th_comment*, char* );
    alias da_th_comment_clear = void function( th_comment* );
}

__gshared {
    da_th_version_string th_version_string;
    da_th_version_number th_version_number;
    da_th_granule_frame th_granule_frame;
    da_th_granule_time th_granule_time;
    da_th_packet_isheader th_packet_isheader;
    da_th_packet_iskeyframe th_packet_iskeyframe;
    da_th_info_init th_info_init;
    da_th_info_clear th_info_clear;
    da_th_comment_init th_comment_init;
    da_th_comment_add th_comment_add;
    da_th_comment_add_tag th_comment_add_tag;
    da_th_comment_query th_comment_query;
    da_th_comment_query_count th_comment_query_count;
    da_th_comment_clear th_comment_clear;
}

class DerelictTheoraLoader : SharedLibLoader {
    public this() {
        super( libNames );
    }

    protected override void loadSymbols() {
        bindFunc( cast( void** )&th_version_string, "th_version_string" );
        bindFunc( cast( void** )&th_version_number, "th_version_number" );
        bindFunc( cast( void** )&th_granule_frame, "th_granule_frame" );
        bindFunc( cast( void** )&th_granule_time, "th_granule_time" );
        bindFunc( cast( void** )&th_packet_isheader, "th_packet_isheader" );
        bindFunc( cast( void** )&th_packet_iskeyframe, "th_packet_iskeyframe" );
        bindFunc( cast( void** )&th_info_init, "th_info_init" );
        bindFunc( cast( void** )&th_info_clear, "th_info_clear" );
        bindFunc( cast( void** )&th_comment_init, "th_comment_init" );
        bindFunc( cast( void** )&th_comment_add, "th_comment_add" );
        bindFunc( cast( void** )&th_comment_add_tag, "th_comment_add_tag" );
        bindFunc( cast( void** )&th_comment_query, "th_comment_query" );
        bindFunc( cast( void** )&th_comment_query_count, "th_comment_query_count" );
        bindFunc( cast( void** )&th_comment_clear, "th_comment_clear" );
    }
}

__gshared DerelictTheoraLoader DerelictTheora;

shared static this() {
    DerelictTheora = new DerelictTheoraLoader();
}